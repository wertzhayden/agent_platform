# Generated by Django 5.2.1 on 2025-07-05 14:32

import django.contrib.postgres.fields
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Firm',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=255)),
                ('location', models.CharField(max_length=255)),
                ('num_of_employees', models.IntegerField()),
                ('metadata', models.JSONField(blank=True, null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Trait',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=100, unique=True)),
                ('dropdown_options', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=100), help_text='The list of choices a player can pick for this trait', size=None)),
                ('score', models.FloatField()),
                ('pillar_score', models.FloatField()),
                ('multiplier', models.FloatField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('username', models.CharField(max_length=150, unique=True)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('password', models.CharField(max_length=128)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Agent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=255)),
                ('key_schools', django.contrib.postgres.fields.ArrayField(base_field=models.TextField(), blank=True, default=list, help_text='A list schools that the agent is formally associated with', size=None)),
                ('favorite_players', django.contrib.postgres.fields.ArrayField(base_field=models.TextField(), blank=True, default=list, help_text='A list of players that the Agent has identified as favorites or potential clients', size=None)),
                ('metadata', models.JSONField(blank=True, null=True)),
                ('firm', models.ForeignKey(help_text='The firm that the agent works for', on_delete=django.db.models.deletion.CASCADE, related_name='agents', to='core.firm')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='agents', to='core.user')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='School',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=255)),
                ('external_name', models.CharField(blank=True, max_length=255, null=True)),
                ('school_id', models.CharField(max_length=100, unique=True)),
                ('thug_positions', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=128), blank=True, default=list, help_text='A list of thug positions that the school is known for', size=None)),
                ('metadata', models.JSONField(blank=True, null=True)),
                ('key_agents', models.ManyToManyField(blank=True, to='core.agent')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Player',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('first_name', models.CharField(max_length=100)),
                ('last_name', models.CharField(max_length=100)),
                ('photo_url', models.URLField(blank=True, null=True)),
                ('high_school', models.CharField(blank=True, max_length=255, null=True)),
                ('hometown_city', models.CharField(blank=True, max_length=100, null=True)),
                ('hometown_state', models.CharField(blank=True, max_length=100, null=True)),
                ('height', models.CharField(blank=True, max_length=10, null=True)),
                ('weight', models.IntegerField(blank=True, null=True)),
                ('jersey_number', models.IntegerField(blank=True, null=True)),
                ('class_year', models.CharField(blank=True, max_length=50, null=True)),
                ('position', models.CharField(blank=True, max_length=50, null=True)),
                ('player_school_link', models.URLField(blank=True, null=True)),
                ('player_ourlads_link', models.URLField(blank=True, null=True)),
                ('schools_attended', django.contrib.postgres.fields.ArrayField(base_field=models.TextField(), blank=True, default=list, help_text='A list of schools that the player has attended', size=None)),
                ('is_favorited', models.BooleanField(default=False)),
                ('depth_chart_position', models.IntegerField(blank=True, help_text='1=starter, 2=backup, etc', null=True)),
                ('projected_time_to_start', models.IntegerField(blank=True, help_text='years until expected to start, or 0=now', null=True)),
                ('estimated_eligibility_left', models.IntegerField(blank=True, help_text='0â€“3 years', null=True)),
                ('thug_position_at_thug_school', models.BooleanField(default=False)),
                ('hs_class_year', models.IntegerField(blank=True, null=True)),
                ('total_stars', models.IntegerField(blank=True, null=True)),
                ('star_source', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=50), blank=True, default=list, help_text="e.g. ['247sports','on3']", size=None)),
                ('hs_position_rank', models.IntegerField(blank=True, null=True)),
                ('overall_hs_rank', models.IntegerField(blank=True, null=True)),
                ('experience_level', models.CharField(blank=True, max_length=100, null=True)),
                ('current_school', models.CharField(blank=True, max_length=255, null=True)),
                ('age', models.IntegerField(blank=True, null=True)),
                ('transfer_rating', models.IntegerField(blank=True, null=True)),
                ('transfer_position_rank', models.IntegerField(blank=True, null=True)),
                ('transfer_overall_rank', models.IntegerField(blank=True, null=True)),
                ('metadata', models.JSONField(blank=True, null=True)),
                ('agent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.agent')),
                ('school', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='players', to='core.school')),
            ],
            options={
                'abstract': False,
            },
        ),
    ]
